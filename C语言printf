C语言printf
http://www.cnblogs.com/shiney/archive/2011/08/19/2145921.html

1.调用格式为  printf("<格式化字符串>", <参量表>); 
  其中格式化字符串包括两部分内容: 一部分是正常字符, 这些字符将按原样输出; 另一部分是格式化规定字符, 以"%"开始, 后跟一个或几个规定字符, 用来确定输出内容格式。参量表是需要输出的一系列参数, 其个数必须与格式化字符串所说明的输出参数个数一样多, 各参数之间用","分开, 且顺序一一对应, 否则将会出现意想不到的错误。

2.格式化字符

%d 十进制有符号整数 
%u 十进制无符号整数 
%f 浮点数 
%s 字符串 
%c 单个字符 
%p 指针的值 
%e 指数形式的浮点数 
%x, %X 无符号以十六进制表示的整数 
%0 无符号以八进制表示的整数 
%g 自动选择合适的表示法 
说明: 
(1). 可以在"%"和字母之间插进数字表示最大场宽。 例如: %3d 表示输出3位整型数, 不够3位右对齐。 %9.2f 表示输出场宽为9的浮点数, 其中小数位为2, 整数位为6, 小数点占一位, 不够9位右对齐。%8s 表示输出8个字符的字符串, 不够8个字符右对齐。 如果字符串的长度、或整型数位数超过说明的场宽, 将按其实际长度输出。 但对浮点数, 若整数部分位数超过了说明的整数位宽度, 将按实际整数位输出; 若小数部分位数超过了说明的小数位宽度, 则按说明的宽度以四舍五入输出。另外, 若想在输出值前加一些0, 就应在场宽项前加个0。 例如: %04d 表示在输出一个小于4位的数值时, 将在前面补0使其总宽度为4位。如果用浮点数表示字符或整型量的输出格式, 小数点后的数字代表最大宽度, 小数点前的数字代表最小宽度。 例如: %6.9s 表示显示一个长度不小于6且不大于9的字符串。若大于9, 则第9个字符以后的内容将被删除。 
(2). 可以在"%"和字母之间加小写字母l, 表示输出的是长型数。例如: %ld 表示输出long整数, %lf 表示输出double浮点数。
(3). 可以控制输出左对齐或右对齐, 即在"%"和字母之间加入一个"-" 号可说明输出为左对齐, 否则为右对齐。例如: %-7d 表示输出7位整数左对齐，%-10s 表示输出10个字符左对齐。


3. 一些特殊规定字符 
\n换行
\f清屏并换页 
\r回车 
\t Tab符 
\xhh表示一个ASCII码用16进表示,
其中hh是1到2个16进制数

int a=1234;
    printf("a=%d\n",a);    //a=1234
    printf("a=%2d\n",a);   //a=1234    超过2位，按实际输出
    printf("a=%6d\n",a);   //a=  1234  不足6位，右对齐
    printf("a=%06d\n",a);  //a=001234  不足6位，前面补0
    printf("a=%-6d\n",a);  //a=1234    '-'左对齐
    

    int* i=&a;
    printf("i=%p\n",i);    //i=0012FF44  输出指针的值，即地址

    float m=8888.8888;     //float 单精度型浮点数 有效位数是6位或7位,根据不同的浮点数会有不同
    float m1=8888.8888f;    //在后面加上f或F，编译警告：truncation from'const double'to 'float'
                            //编译器默认浮点数为double
    float m2=8888.888f;  
    double n=8888.8888;
    double n1=8888888888.88888888;  //double 双精度型浮点数 有效位数是15位
    printf("m=%f\n m1=%f\n m2=%f\n n=%lf\n n1=%f\n",m,m1,m2,n,n1); // m=8888.888672
                                                                //  m1=8888.888672     
                                                                //  m2=8888.887695
                                                               // n=8888.888800
                                                               // n1=8888888888.888889
                                                               //%f的默认输出小数位数就是6位不管有没有l
    /*printf的%f说明符的确既可以输出float型又可以输出 double型。 根据"默认参数提升"规则（在printf这样的函数的
    可变参数列表中 ，不论作用域内有没有原型，都适用这一规则）float型会被提升为double型。因此printf()只会看到
    双精度数。严格地讲，%lf在printf下是未定义的，但是很多系统可能会接受它。要确保可移植性，就要坚持使用%f。*/

    printf("m4=%4.2f\n",m);   //宽度总共4位，小数两位，小数点一位，整数一位，这里整数超过宽度规定，按实际整数位输出
    printf("m5=%9.6f\n",m);   //浮点数小数部分不足6位，右对齐
    printf("m6=%9.2f\n",m);   //整数部分不足6位，右对齐；小数部分超过2位，四舍五入

    char c[20]="Hello,world!";
    printf("c=%s\n",c);    
    printf("c=%6.9s\n",c);  //c=Hello,wor  6.9s表示输出一个长度长度不小于6且不大于9的字符串。若大于9, 则第9个字符以后的内容将被删除。


