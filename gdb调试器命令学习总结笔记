gdb调试器命令学习总结笔记

http://www.cnblogs.com/rosesmall/archive/2012/04/12/2444413.html

Linux中包含有一个很有用的调试工具－－gdb(GNU Debuger)，它可以用来调试C和C++程序，功能不亚于Windows下的许多图形界面的调试工具。

和所有常用的调试工具一样，gdb提供了以下功能：
　# 监视程序中变量的值
　# 在程序中设置断点
　# 程序的单步执行

在使用gdb前，必须先载入可执行文件，因为要进行调试，文件中就必须包含调试信息，所以在用gcc或cc编译时就需要用-g参数来打开程序的调试选项。

调试开始时，必须先载入要进行调试的程序，可以用以下两种方式：
　* 在启动gdb后执行以下命令：
　　　file 可执行文件路径
　* 在gdb启动时就载入程序：
　　　gdb 可执行文件路径

载入程序后，接下来就是要进行断点的设置，要监视的变量的添加等工作，下面对在这个过程中常会用到的命令逐一进行介绍：
　* list：显示程序中的代码，常用使用格式有：
　　　　list
　　　　　　输出从上次调用list命令开始往后的10行程序代码。
　　　　list -
　　　　　　输出从上次调用list命令开始往前的10行程序代码。
　　　　list n
　　　　　　输出第n行附近的10行程序代码。
　　　　list function
　　　　　　输出函数function前后的10行程序代码。
　* forward/search：从当前行向后查找匹配某个字符串的程序行。使用格式：
　　　　forward/search 字符串
　　查找到的行号将保存在$_变量中，可以用print $_命令来查看。
　* reverse-search：和forward/search相反，向前查找字符串。使用格式同上。
　* break：在程序中设置断点，当程序运行到指定行上时，会暂停执行。使用格式：
　　　　break 要设置断点的行号
　* tbreak：设置临时断点，在设置之后只起作用一次。使用格式：
　　　　tbreak 要设置临时断点的行号
　* clear：和break相反，clear用于清除断点。使用格式：
　　　　clear 要清除的断点所在的行号
　* run：启动程序，在run后面带上参数可以传递给正在调试的程序。
　* awatch：用来增加一个观察点(add watch)，使用格式：
　　　　awatch 变量或表达式
　　当表达式的值发生改变或表达式的值被读取时，程序就会停止运行。
　* watch：与awatch类似用来设置观察点，但程序只有当表达式的值发生改变时才会停止运行。使用格 式：
　　　　watch 变量或表达式
　　需要注意的是，awatch和watch都必须在程序运行的过程中设置观察点，即可运行run之后才能设置。
　* commands：设置在遇到断点后执行特定的指令。使用格式有：
　　　　commands
　　　　　　设置遇到最后一个遇到的断点时要执行的命令
　　　　commands n
　　　　　　设置遇到断点号n时要执行的命令
　　注意，commands后面跟的是断点号，而不是断点所在的行号。
　　在输入命令后，就可以输入遇到断点后要执行的命令，每行一条命令，在输入最后一条命令后输入end就可以结束输入。
　* delete：清除断点或自动显示的表达式。使用格式：
　　　　delete 断点号
　* disable：让指定断点失效。使用格式：
　　　　disable 断点号列表
　　断点号之间用空格间隔开。
　* enable：和disable相反，恢复失效的断点。使用格式：
　　　　enable 断点编号列表
　* ignore：忽略断点。使用格式：
　　　　ignore 断点号 忽略次数
　* condition：设置断点在一定条件下才能生效。使用格式：
　　　　condition 断点号 条件表达式
　* cont/continue：使程序在暂停在断点之后继续运行。使用格式：
　　　　cont
　　　　　　跳过当前断点继续运行。
　　　　cont n
　　　　　　跳过n次断点，继续运行。
　　当n为1时，cont 1即为cont。
　* jump：让程序跳到指定行开始调试。使用格式：
　　　　jump 行号
　* next：继续执行语句，但是跳过子程序的调用。使用格式：
　　　　next
　　　　　　执行一条语句
　　　　next n
　　　　　　执行n条语句
　* nexti：单步执行语句，但和next不同的是，它会跟踪到子程序的内部，但不打印出子程序内部的语句。使用格式同上。
　* step：与next类似，但是它会跟踪到子程序的内部，而且会显示子程序内部的执行情况。使用格式同上。
　* stepi：与step类似，但是比step更详细，是nexti和step的结合。使用格式同上。
　* whatis：显示某个变量或表达式的数据类型。使用格式：
　　　　whatis 变量或表达式
　* ptype：和whatis类似，用于显示数据类型，但是它还可以显示typedef定义的类型等。使用格式：
　　　　ptype 变量或表达式
　* set：设置程序中变量的值。使用格式：
　　　　set 变量=表达式
　　　　set 变量:=表达式
　* display：增加要显示值的表达式。使用格式：
　　　　display 表达式
　* info display：显示当前所有的要显示值的表达式。
　* delete display/undisplay：删除要显示值的表达式。使用格式：
　　　　delete display/undisplay 表达式编号
　* disable display：暂时不显示一个要表达式的值。使用格式：
　　　　disable display 表达式编号
　* enable display：与disable display相反，使用表达式恢复显示。使用格式：
　　　　enable display 表达式编号
　* print：打印变量或表达式的值。使用格式：
　　　　print 变量或表达式
　　表达式中有两个符号有特殊含义：$和$$。
　　$表示给定序号的前一个序号，$$表示给定序号的前两个序号。
　　如果$和$$后面不带数字，则给定序号为当前序号。
　* backtrace：打印指定个数的栈帧(stack frame)。使用格式：
　　　　backtrace 栈帧个数
　* frame：打印栈帧。使用格式：
　　　　frame 栈帧号
　* info frame：显示当前栈帧的详细信息。
　* select-frame：选择栈帧，选择后可以用info frame来显示栈帧信息。使用格式：
　　　　select-frame 栈帧号
　* kill：结束当前程序的调试。
　* quit：退出gdb。

如要查看所有的gdb命令，可以在gdb下键入两次Tab(制表符)，运行“help command”可以查看命令command的详细使用格式。
本文仅对使用gdb调试过程中的一些常用指令的用法进行简单地总结，如要获取关于gdb的更详细的资料，请参阅gdb的官方文档：


